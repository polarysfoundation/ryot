pragma: "0.0.1";

class contract Storage {


    // ST = storage
    // PUB = public
    // PRIV = private
    // FUNC = func
    // STRUCT = struct
    // ENUM = enum

    enum Test: {
        data1;
        data2;
        data3;
        data4;
        data5;
    }


    pub struct TestStruct: {
        data: string;
        data2: uint64;
        data3: address;
        data4: bool;
        data6: uint256;
        data7: address;
        data8: []address;
    }


    pub st balance(address): uint64;

    pub func addAccount(account: address, amount: uint64): {
        new balance(account): amount;
    }

    pub func updateBalance(account: address, amount: uint64): {
        uint64 _balance: balance(account);

        balance(account): _balance + amount;
    }

    pub func removeAccount(account: address): {
        delete: balance(account);
    }

    pub func add(a: uint64, b: uint64): uint64 {
        return a + b; // Si tienen o no tienen "()" es valido 
    }

    pub func sub(a: uint64, b: uint64): uint64 {
        return (a - b); // Si tienen o no "()" es valido 
    }

    pub func name(): string {
        return "Test";
    }



}

class interface Storage {
    pub func add(a: uint64, b: uint64): uint64;
    pub func sub(a: uint64, b: uint64): uint64;
    pub func name(): string;
}